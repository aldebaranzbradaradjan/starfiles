[gd_resource type="ShaderMaterial" load_steps=6 format=3 uid="uid://de7j6v26sqr46"]

[ext_resource type="Texture2D" uid="uid://dyw3m5lguaecy" path="res://external_ressources/textures/grass_01/T_pjwbY0_1K_B.jpg" id="1_mblh0"]
[ext_resource type="Texture2D" uid="uid://dqvma5k7x1div" path="res://external_ressources/heightmap/Apsur/heightmap_test.res" id="2_ok14l"]

[sub_resource type="Shader" id="Shader_h583b"]
code = "shader_type spatial;
render_mode cull_back, diffuse_burley, specular_schlick_ggx;

uniform highp sampler2D heightmap : source_color, filter_linear_mipmap, repeat_enable;
uniform highp sampler2D noise_texture : source_color, filter_linear_mipmap, repeat_enable;
uniform highp sampler2D grass_texture : source_color, filter_linear_mipmap, repeat_enable;

uniform float _uv_scale = 1.0;
uniform float _noise_uv_scale = 1.0;
uniform vec2 _uv_offset;
uniform float _uv_rot;
uniform vec3 grass_shape[4];
uniform float _grass_scale = 1.0;
uniform float time;

vec2 rotateUV(vec2 uv, vec2 pivot, float rotation) {
    float sine = sin(rotation);
    float cosine = cos(rotation);
    uv -= pivot;
    uv.x = uv.x * cosine - uv.y * sine;
    uv.y = uv.x * sine + uv.y * cosine;
    uv += pivot;
    return uv;
}

mat3 rotateY(float theta) {
	float cosa = cos(theta);
	float sina = sin(theta);
	mat3 rotate_y  = mat3(
	   vec3(cosa, 0.0, sina),
	   vec3(0.0, 1.0, 0.0),
	   vec3(-sina, 0.0, cosa)
	);
	return rotate_y;
}

void vertex() {
	vec2 cell_coords = (MODEL_MATRIX * vec4(VERTEX, 1)).xz;
	UV = cell_coords / vec2(textureSize(heightmap, 0));
	UV2 = cell_coords / vec2(textureSize(noise_texture, 0));

	float height = texture(heightmap, (UV*1.) - _uv_offset).r ;
	VERTEX.y = height;

    vec2 uv = vec2(VERTEX.x, VERTEX.z);
    vec4 grass_data = texture(noise_texture, UV2);
    height = grass_data.r;

    vec3 offset = grass_shape[VERTEX_ID % 4] * 0.1 ;
    offset.y *= height * _grass_scale;

    float wind = sin(uv.x * 10.0 + TIME*time) * 0.01;
    offset.x += wind;

	offset.y = offset.y - texture(noise_texture, UV2 * _noise_uv_scale).r * 1.3;// + 1.;
    VERTEX = VERTEX + offset * rotateY(_uv_rot + float(VERTEX_ID) * texture(noise_texture, UV2 * _noise_uv_scale).r);
}

void fragment() {
	vec4 grass = texture(grass_texture, rotateUV(UV2 * _uv_scale, vec2(0.5), _uv_rot));
	vec3 noise = texture(noise_texture, UV2 * _noise_uv_scale).rgb;
	vec3 color = grass.rgb - noise;
	ALBEDO = (vec3(0.34,0.5,0.1) - (noise * 0.4)) * 0.3 + vec3(.1, .1, .1)*0.1; //vec3(0.9,0.5,0.1); 
	METALLIC = 0.5;
	ROUGHNESS = 0.9;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_acqx8"]
frequency = 0.3647
fractal_type = 0
fractal_octaves = 1
domain_warp_frequency = 5.74

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_g8r2a"]
seamless = true
seamless_blend_skirt = 1.0
noise = SubResource("FastNoiseLite_acqx8")

[resource]
render_priority = 0
shader = SubResource("Shader_h583b")
shader_parameter/_uv_scale = 1991.16
shader_parameter/_noise_uv_scale = 1.585
shader_parameter/_uv_offset = Vector2(0.5, 0.5)
shader_parameter/_uv_rot = 0.645
shader_parameter/grass_shape = PackedVector3Array(-0.125, -28.925, 0.54, -3.115, 73.6, 1.025, 0.34, -32.705, -0.175, -0.27, -53.195, -0.045)
shader_parameter/_grass_scale = 0.2
shader_parameter/time = 2.035
shader_parameter/heightmap = ExtResource("2_ok14l")
shader_parameter/noise_texture = SubResource("NoiseTexture2D_g8r2a")
shader_parameter/grass_texture = ExtResource("1_mblh0")
