[gd_resource type="ShaderMaterial" load_steps=7 format=3 uid="uid://de7j6v26sqr46"]

[ext_resource type="Texture2D" uid="uid://b4vxfop4u3b32" path="res://ressources/maps/Apsur/baked_map_color.png" id="1_ddw64"]
[ext_resource type="Texture2D" uid="uid://1y64ryf8ikj3" path="res://external_ressources/textures/grass_02/ground037_alb_ht.png" id="2_awydf"]
[ext_resource type="Texture2D" uid="uid://dqvma5k7x1div" path="res://external_ressources/heightmap/Apsur/heightmap_test.res" id="2_ok14l"]

[sub_resource type="Shader" id="Shader_h583b"]
code = "shader_type spatial;
//render_mode cull_back, diffuse_burley, specular_schlick_ggx;

uniform float distance_fade_min : hint_range(0.0, 4096.0, 0.01);
uniform float distance_fade_max : hint_range(0.0, 4096.0, 0.01);

uniform highp sampler2D baked_terrain : source_color, filter_linear_mipmap, repeat_enable;
uniform highp sampler2D heightmap : source_color, filter_linear_mipmap, repeat_enable;
uniform highp sampler2D noise_texture : source_color, filter_linear_mipmap, repeat_enable;
uniform highp sampler2D grass_texture : source_color, filter_linear_mipmap, repeat_enable;

uniform float _uv_scale = 1.0;
uniform float _noise_uv_scale = 1.0;
uniform vec2 _uv_offset;
uniform float _uv_rot;
uniform vec3 grass_shape[3];
uniform float _grass_scale = 1.0;
uniform float time;

vec2 rotateUV(vec2 uv, vec2 pivot, float rotation) {
    float sine = sin(rotation);
    float cosine = cos(rotation);
    uv -= pivot;
    uv.x = uv.x * cosine - uv.y * sine;
    uv.y = uv.x * sine + uv.y * cosine;
    uv += pivot;
    return uv;
}

mat3 rotateY(float theta) {
	float cosa = cos(theta);
	float sina = sin(theta);
	mat3 rotate_y  = mat3(
	   vec3(cosa, 0.0, sina),
	   vec3(0.0, 1.0, 0.0),
	   vec3(-sina, 0.0, cosa)
	);
	return rotate_y;
}

void vertex() {
	vec2 cell_coords = (MODEL_MATRIX * vec4(VERTEX, 1)).xz;
	UV = cell_coords / vec2(textureSize(heightmap, 0));
	UV2 = cell_coords / vec2(textureSize(noise_texture, 0));

	float height = texture(heightmap, (UV*1.) - _uv_offset).r ;
	float baked_terrain_color = textureLod(baked_terrain, UV2*0.125 - _uv_offset, 2.0).g * 100. ;
	
	VERTEX.y = height;
	
	if(baked_terrain_color >= 0.5) {
	    vec2 uv = vec2(VERTEX.x, VERTEX.z);
	    vec4 grass_data = texture(noise_texture, UV2);
	    height = grass_data.r;

	    vec3 offset = grass_shape[VERTEX_ID % 3] * 0.1 ;
	    offset.y *= height * _grass_scale;
		offset.z *= _grass_scale;

	    float wind = sin(uv.x * 10.0 + TIME*time) * 0.01;
	    offset.x += wind;

		offset.y = offset.y - texture(noise_texture, UV2 * _noise_uv_scale).r * 1.3;// + 1.;
	    VERTEX = VERTEX + offset * rotateY(_uv_rot + float(VERTEX_ID) * texture(noise_texture, UV2 * _noise_uv_scale).r);
	}
	else
		VERTEX.y -= 10.;
}

void fragment() {
	{
		// Distance Fade: Pixel Dither
		float fade_distance = length(VERTEX);

		// Use interleaved gradient noise, which is fast but still looks good.
		const vec3 magic = vec3(0.06711056, 0.00583715, 52.9829189);
		float fade = clamp(smoothstep(distance_fade_min, distance_fade_max, fade_distance), 0.0, 1.0);
		// Use a hard cap to prevent a few stray pixels from remaining when past the fade-out distance.
		if (fade < 0.001 || fade < fract(magic.z * fract(dot(FRAGCOORD.xy, magic.xy)))) {
			discard;
		}
	}
	vec4 baked_terrain_color = texture(baked_terrain, UV2*0.125 - _uv_offset) * 2.;
	vec4 grass = texture(grass_texture, rotateUV(UV2 * _uv_scale, vec2(0.5), _uv_rot * baked_terrain_color.r )) * 0.5;
	//if(grass.a < 0.5) discard;
	vec3 noise = texture(noise_texture, UV2 * _noise_uv_scale).rgb;
	vec3 color = 1.0-noise * 0.6;
	ALBEDO = color * ((vec3(0.4,0.5,0.2) - (noise * 0.4)) * 0.4 + baked_terrain_color.rgb*0.5 + grass.rgb*0.3) * 0.7; //vec3(0.9,0.5,0.1); 
	//ALBEDO = vec3(0.93,0.55,0.1);
	METALLIC = 0.0;
	SPECULAR = 0.1;
	ROUGHNESS = 0.8;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_acqx8"]
frequency = 1.0
fractal_type = 0
fractal_octaves = 1
domain_warp_frequency = 5.74

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_g8r2a"]
seamless = true
seamless_blend_skirt = 1.0
noise = SubResource("FastNoiseLite_acqx8")

[resource]
render_priority = 0
shader = SubResource("Shader_h583b")
shader_parameter/distance_fade_min = 50.85
shader_parameter/distance_fade_max = 0.0
shader_parameter/_uv_scale = 1.0
shader_parameter/_noise_uv_scale = 1.585
shader_parameter/_uv_offset = Vector2(0.5, 0.5)
shader_parameter/_uv_rot = 0.56
shader_parameter/grass_shape = PackedVector3Array(-4.53, -2.035, 0.035, -0.655, 1, 0.18, 0.145, 0, 0)
shader_parameter/_grass_scale = 22.685
shader_parameter/time = 2.195
shader_parameter/baked_terrain = ExtResource("1_ddw64")
shader_parameter/heightmap = ExtResource("2_ok14l")
shader_parameter/noise_texture = SubResource("NoiseTexture2D_g8r2a")
shader_parameter/grass_texture = ExtResource("2_awydf")
